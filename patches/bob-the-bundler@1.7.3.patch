diff --git a/dist/commands/runify.js b/dist/commands/runify.js
index a44025b..e03c087 100644
--- a/dist/commands/runify.js
+++ b/dist/commands/runify.js
@@ -83,7 +83,8 @@ async function runify(packagePath, _config, reporter) {
         return;
     }
     if (isNext(pkg)) {
-        await buildNext(cwd);
+        const additionalRequire = pkg?.buildOptions?.runify?.next?.header ?? null
+        await buildNext(cwd, additionalRequire);
         await rewritePackageJson(pkg, cwd, (newPkg) => ({
             ...newPkg,
             dependencies: pkg.dependencies,
@@ -137,7 +138,7 @@ function isNext(pkg) {
     var _a, _b;
     return ((_a = pkg === null || pkg === void 0 ? void 0 : pkg.dependencies) === null || _a === void 0 ? void 0 : _a.next) || ((_b = pkg === null || pkg === void 0 ? void 0 : pkg.devDependencies) === null || _b === void 0 ? void 0 : _b.next);
 }
-async function buildNext(cwd) {
+async function buildNext(cwd, additionalRequire) {
     await new Promise((resolve, reject) => {
         const child = child_process_1.spawn("next", ["build"], {
             stdio: "inherit",
@@ -146,7 +147,20 @@ async function buildNext(cwd) {
         child.on("exit", (code) => (code ? reject(code) : resolve(code)));
         child.on("error", reject);
     });
+
     await fs_extra_1.default.mkdirp(path_1.join(cwd, "dist"));
+
+    if (additionalRequire) {
+        await tsup_1.build({
+            entryPoints: [path_1.join(cwd, additionalRequire)],
+            outDir: path_1.join(cwd, "dist"),
+            target: "node16",
+            format: ["cjs"],
+            splitting: false,
+            skipNodeModulesBundle: true,
+        });
+    }
+
     await Promise.all([
         fs_extra_1.default.copy(path_1.join(cwd, ".next"), path_1.join(cwd, "dist/.next"), {
             filter(src) {
@@ -159,11 +173,13 @@ async function buildNext(cwd) {
             `#!/usr/bin/env node`,
             `process.on('SIGTERM', () => process.exit(0))`,
             `process.on('SIGINT', () => process.exit(0))`,
+            additionalRequire ? `require('${additionalRequire.replace(".ts", '')}')` : ``,
             `
           require('next/dist/server/lib/start-server').startServer({
             dir: __dirname,
             hostname: '0.0.0.0',
-            port: parseInt(process.env.PORT)
+            port: parseInt(process.env.PORT),
+            conf: {},
           }).then(async (app)=>{
             const appUrl = 'http://' + app.hostname + ':' + app.port;
             console.log('started server on '+ app.hostname + ':' + app.port + ', url: ' + appUrl);
